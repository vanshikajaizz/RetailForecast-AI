# ‚úÖ Essential Imports
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import base64
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os
import plotly.express as px
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dotenv import load_dotenv
load_dotenv()
import io




import os
EMAIL_ADDRESS = st.secrets["EMAIL_ADDRESS"]
EMAIL_PASSWORD = st.secrets["EMAIL_PASSWORD"]

def send_email_alert(subject, body, to_email):
    msg = MIMEMultipart()
    msg["From"] = EMAIL_ADDRESS
    msg["To"] = to_email
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))

    try:
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.sendmail(EMAIL_ADDRESS, to_email, msg.as_string())
        print("üìß Email sent successfully!")
    except Exception as e:
        print(f"‚ùå Failed to send email: {e}")




# üåê Language Selection
language = st.sidebar.selectbox("üåê Select Language", ["English", "Hindi","Spanish","French"])


translations = {
    "English": {
        "title": "üìà Walmart Demand Forecasting - RetailForecast AI",
        "subtitle": "Get weekly sales predictions and explore real-time trends with interactive analysis.",
        "filter_header": "üîç Filter for Prediction",
        "select_store": "Select Store",
        "select_dept": "Select Department",
        "select_date": "Select Date",
        "high_alert": "‚ö†Ô∏è High Sales Alert! Monitor stock and logistics.",
        "low_alert": "üìâ Low Sales Alert! Investigate potential demand issues.",
        "predicted": "üìä Predicted Weekly Sales",
        "actual": "üìå Actual Sales",
    },
    "Hindi": {
        "title": "üìà ‡§µ‡•â‡§≤‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Æ‡§æ‡§Ç‡§ó ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§® - ‡§∞‡§ø‡§ü‡•á‡§≤‡§´‡•ã‡§∞‡§ï‡§æ‡§∏‡•ç‡§ü ‡§è‡§Ü‡§à",
        "subtitle": "‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∞‡•Å‡§ù‡§æ‡§® ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "filter_header": "üîç ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞",
        "select_store": "‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "select_dept": "‡§µ‡§ø‡§≠‡§æ‡§ó ‡§ö‡•Å‡§®‡•á‡§Ç",
        "select_date": "‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "high_alert": "‚ö†Ô∏è ‡§Ö‡§ß‡§ø‡§ï ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä! ‡§∏‡•ç‡§ü‡•â‡§ï ‡§î‡§∞ ‡§≤‡•â‡§ú‡§ø‡§∏‡•ç‡§ü‡§ø‡§ï‡•ç‡§∏ ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§",
        "low_alert": "üìâ ‡§ï‡§Æ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä! ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç‡•§",
        "predicted": "üìä ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä",
        "actual": "üìå ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä",
    },
    "Spanish": {
        "title": "üìà Predicci√≥n de Ventas de Walmart - RetailForecast AI",
        "subtitle": "Obt√©n predicciones semanales de ventas y explora tendencias en tiempo real.",
        "filter_header": "üîç Filtro para Predicci√≥n",
        "select_store": "Seleccionar Tienda",
        "select_dept": "Seleccionar Departamento",
        "select_date": "Seleccionar Fecha",
        "high_alert": "‚ö†Ô∏è ¬°Alerta de Ventas Altas! Supervisa el inventario y la log√≠stica.",
        "low_alert": "üìâ ¬°Alerta de Ventas Bajas! Investiga posibles problemas.",
        "predicted": "üìä Ventas Semanales Previstos",
        "actual": "üìå Ventas Reales",
    },
    "French": {
        "title": "üìà Pr√©vision des Ventes Walmart - RetailForecast AI",
        "subtitle": "Obtenez des pr√©visions hebdomadaires et explorez les tendances en temps r√©el.",
        "filter_header": "üîç Filtre pour la Pr√©diction",
        "select_store": "S√©lectionner un Magasin",
        "select_dept": "S√©lectionner un D√©partement",
        "select_date": "S√©lectionner une Date",
        "high_alert": "‚ö†Ô∏è Alerte de Forte Vente ! Surveillez le stock et la logistique.",
        "low_alert": "üìâ Alerte de Faible Vente ! V√©rifiez les probl√®mes potentiels.",
        "predicted": "üìä Ventes Hebdomadaires Pr√©vues",
        "actual": "üìå Ventes R√©elles",
    }
}





# ‚úÖ Page Configuration
st.set_page_config(page_title="RetailForecast AI", layout="wide")

# Global Styling
st.markdown("""
    <style>
    /* Font & layout */
    html, body, [class*="css"]  {
        font-family: 'Segoe UI', sans-serif;
        color: #ffffff;
    }

    /* Metric boxes */
    div[data-testid="metric-container"] {
        background: #232323;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 0 10px #444;
        margin: 10px 0;
    }

    /* Expander panel */
    .streamlit-expanderHeader {
        font-weight: 600;
        font-size: 16px;
    }

    .stApp {
        background-color: rgba(0, 0, 0, 0.6); /* fallback bg in case bg.jpg not visible */
    }

    </style>
""", unsafe_allow_html=True)


# ‚úÖ Add Background Image
def add_bg(img_file):
    with open(img_file, "rb") as image_file:
        encoded = base64.b64encode(image_file.read()).decode()
    st.markdown(f"""
        <style>
        .stApp {{
            background-image: url("data:image/jpg;base64,{encoded}");
            background-size: cover;
            background-attachment: fixed;
            background-position: center;
        }}
        </style>
    """, unsafe_allow_html=True)

add_bg("assets/bg.jpg")



# ‚úÖ Load Model and Data
model = joblib.load("model/model.pkl")
final_df = pd.read_csv("final_df.csv")
final_df['Date'] = pd.to_datetime(final_df['Date'])
final_df['Year'] = final_df['Date'].dt.year

# ‚úÖ Clean up IsHoliday Columns if Needed
# if 'IsHoliday_x' in final_df.columns and 'IsHoliday_y' in final_df.columns:
#     if (final_df['IsHoliday_x'] == final_df['IsHoliday_y']).all():
#         final_df.drop(columns=['IsHoliday_x'], inplace=True)
#         final_df.rename(columns={'IsHoliday_y': 'IsHoliday'}, inplace=True)
#     else:
#         final_df.rename(columns={'IsHoliday_y': 'IsHoliday'}, inplace=True)

# # ‚úÖ App Title
# st.title("üìà Walmart Demand Forecasting - RetailForecast AI")
# st.markdown("Get weekly sales predictions and explore real-time trends with interactive analysis.")

# # ‚úÖ Sidebar Filters
# st.sidebar.header("üîç Filter for Prediction")
# store = st.sidebar.selectbox("Select Store", sorted(final_df['Store'].unique()))
# dept = st.sidebar.selectbox("Select Department", sorted(final_df['Dept'].unique()))
# date = st.sidebar.date_input("Select Date", final_df['Date'].min())




# # ‚úÖ Prediction Logic
# selected = final_df[(final_df['Store'] == store) & (final_df['Dept'] == dept) & (final_df['Date'] == pd.to_datetime(date))]

# if selected.empty:
#     st.warning("No data found for this combination.")
# else:
#     features = selected.drop(columns=['Weekly_Sales', 'Date'])
    
#     feature_names = joblib.load("model/feature_names.pkl")
#     features = features.reindex(columns=feature_names, fill_value=0)
    

#     prediction = model.predict(features)[0]
#     actual = selected['Weekly_Sales'].values[0]

#     # st.metric("üìä Predicted Weekly Sales", f"${prediction:,.2f}")
#     # st.metric("üìå Actual Sales", f"${actual:,.2f}")
#     col1, col2 = st.columns(2)
#     col1.metric("üìä Predicted Weekly Sales", f"${prediction:,.2f}")
#     col2.metric("üìå Actual Sales", f"${actual:,.2f}")


#     # Sales Alert
#     # if prediction > 50000:
#     #     st.error("‚ö†Ô∏è High Sales Alert! Monitor stock and logistics.")
#     # elif prediction < 1000:
#     #     st.warning("üìâ Low Sales Alert! Investigate potential demand issues.")
#     if prediction > 50000:
#         st.error("üö® **High Sales Alert!** Restock inventory and monitor logistics.")
#     elif prediction < 1000:
#         st.warning("üìâ **Low Sales Warning!** Investigate promotions or local demand.")
#     else:
#         st.success("‚úÖ Sales within normal range.")



# ‚úÖ App Title with Translation
st.title(translations[language]["title"])
st.markdown(translations[language]["subtitle"])

# ‚úÖ Sidebar Filters (Translated)
st.sidebar.header(translations[language]["filter_header"])
store = st.sidebar.selectbox(translations[language]["select_store"], sorted(final_df['Store'].unique()))
dept = st.sidebar.selectbox(translations[language]["select_dept"], sorted(final_df['Dept'].unique()))
date = st.sidebar.date_input(translations[language]["select_date"], final_df['Date'].min())

# ‚úÖ Prediction Logic
selected = final_df[(final_df['Store'] == store) & (final_df['Dept'] == dept) & (final_df['Date'] == pd.to_datetime(date))]

if selected.empty:
    st.warning("No data found for this combination.")
else:
    features = selected.drop(columns=['Weekly_Sales', 'Date'])

    feature_names = joblib.load("model/feature_names.pkl")
    features = features.reindex(columns=feature_names, fill_value=0)

    prediction = model.predict(features)[0]
    actual = selected['Weekly_Sales'].values[0]

    col1, col2 = st.columns(2)
    col1.metric(translations[language]["predicted"], f"${prediction:,.2f}")
    col2.metric(translations[language]["actual"], f"${actual:,.2f}")

    # if prediction > 50000:
    #     st.error(translations[language]["high_alert"])
    # elif prediction < 1000:
    #     st.warning(translations[language]["low_alert"])
    # else:
    #     st.success("‚úÖ Sales within normal range.")
    user_email = st.sidebar.text_input("üì© Enter your email for alerts (optional)")

    if prediction > 50000:
        st.error(translations[language]["high_alert"])
        if user_email:
            send_email_alert(
                subject="üö® High Sales Alert",
                body=f"The predicted weekly sales for Store {store}, Department {dept} on {date} is ${prediction:,.2f}. Restock inventory accordingly.",
                to_email=user_email
            )
    elif prediction < 1000:
        st.warning(translations[language]["low_alert"])
        if user_email:
            send_email_alert(
                subject="üìâ Low Sales Alert",
                body=f"The predicted weekly sales for Store {store}, Department {dept} on {date} is ${prediction:,.2f}. Investigate promotions or demand issues.",
                to_email=user_email
            )
    else:
        st.success("‚úÖ Sales within normal range.")



# ========================
# üìä ANALYTICS SECTION
# ========================

# 1Ô∏è‚É£ Weekly Sales Over Time
with st.expander("üìÖ Weekly Sales Over Time"):
    start_date, end_date = st.slider(
        "Select Date Range",
        min_value=final_df['Date'].min().date(),
        max_value=final_df['Date'].max().date(),
        value=(final_df['Date'].min().date(), final_df['Date'].max().date())
    )
    filtered = final_df[(final_df['Date'] >= pd.to_datetime(start_date)) & (final_df['Date'] <= pd.to_datetime(end_date))]
    st.line_chart(filtered.groupby("Date")["Weekly_Sales"].mean())

# 2Ô∏è‚É£ Store-wise Sales
with st.expander("üè™ Average Sales by Store"):
    year = st.selectbox("Select Year", sorted(final_df['Year'].unique()))
    store_sales = final_df[final_df['Year'] == year].groupby("Store")["Weekly_Sales"].mean()
    st.bar_chart(store_sales)

# 3Ô∏è‚É£ Department Sales
with st.expander("üìä Department Sales Comparison"):
    departments = st.multiselect("Select Departments", final_df['Dept'].unique(), default=[1, 2, 3])
    dep_data = final_df[final_df['Dept'].isin(departments)]
    dep_sales = dep_data.groupby("Dept")["Weekly_Sales"].mean()
    st.bar_chart(dep_sales)

# 4Ô∏è‚É£ Actual vs Predicted
with st.expander("üéØ Actual vs Predicted Sales"):
    try:
        y_test = pd.read_csv("y_test.csv")
        y_pred = pd.read_csv("y_pred.csv")

        n = st.slider("Select number of predictions to view", 10, 100, 50)
        chart_df = pd.DataFrame({
            "Actual": y_test.values[:n].flatten(),
            "Predicted": y_pred.values[:n].flatten()
        })
        st.line_chart(chart_df)
    except:
        st.info("Prediction data not available. Please ensure `y_test.csv` and `y_pred.csv` exist.")

# 5Ô∏è‚É£ Holiday vs Non-Holiday
with st.expander("üéâ Sales on Holidays vs Non-Holidays"):
    # Use either IsHoliday_x or IsHoliday_y
    holiday_col = 'IsHoliday_x' if 'IsHoliday_x' in final_df.columns else (
                  'IsHoliday_y' if 'IsHoliday_y' in final_df.columns else None)

    if holiday_col:
        include_holidays = st.checkbox("Include Holidays Only")
        filtered_holiday = final_df[final_df[holiday_col] == int(include_holidays)]

        # üìä Boxplot: Weekly Sales on Holidays vs Non-Holidays
        st.subheader("üì¶ Sales Distribution (Box Plot)")
        fig, ax = plt.subplots()
        sns.boxplot(data=filtered_holiday, x=holiday_col, y="Weekly_Sales", ax=ax)
        ax.set_title("Holiday vs Non-Holiday Weekly Sales")
        st.pyplot(fig)

        # üßÅ Interactive Pie Chart with Plotly
        st.subheader("üßÅ Holiday Distribution (Interactive)")
        holiday_counts = final_df[holiday_col].value_counts().rename({0: "Non-Holiday", 1: "Holiday"}).reset_index()
        holiday_counts.columns = ['Holiday', 'Count']

        fig = px.pie(
            holiday_counts,
            names='Holiday',
            values='Count',
            color='Holiday',
            color_discrete_map={"Holiday": "#FF5722", "Non-Holiday": "#4CAF50"},
            title="Holiday vs Non-Holiday Week Distribution"
        )

        fig.update_traces(textinfo='percent+label', pull=[0.1, 0], hoverinfo='label+percent+value')
        fig.update_layout(showlegend=True)
        st.plotly_chart(fig, use_container_width=True)

    else:
        st.warning("Holiday information is missing in your dataset.")



# 6Ô∏è‚É£ Feature Importance (Interactive with Plotly)
with st.expander("üß† Feature Importance (Interactive)"):
    try:
        import plotly.express as px

        # Extract feature importances
        importances = model.feature_importances_
        feature_names = model.feature_names_in_

        fi_df = pd.DataFrame({
            "Feature": feature_names,
            "Importance": importances
        }).sort_values(by="Importance", ascending=False)

        # User selects how many top features to display
        top_n = st.selectbox("Select number of top features to display", [5, 10, 15, 20], index=1)

        top_features = fi_df.head(top_n)

        # Create interactive plotly bar chart
        fig = px.bar(
            top_features,
            x='Importance',
            y='Feature',
            orientation='h',
            color='Importance',
            color_continuous_scale='Bluered_r',
            title=f"Top {top_n} Most Important Features for Sales Prediction"
        )

        fig.update_layout(
            yaxis=dict(autorange="reversed"),
            height=400 + top_n * 10,
            showlegend=False
        )

        st.plotly_chart(fig, use_container_width=True)

        with st.expander("üìã View Full Feature Ranking"):
            st.dataframe(fi_df.reset_index(drop=True))

    except Exception as e:
        st.warning("Unable to display feature importance.")
        st.text(str(e))

##email-alert
def send_email_alert(subject, body, to_email):
    sender_email = "your_email@example.com"
    sender_password = "your_app_password"  # Use app-specific password (e.g., from Gmail)

    msg = MIMEMultipart()
    msg["From"] = sender_email
    msg["To"] = to_email
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))

    try:
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, to_email, msg.as_string())
        print("üìß Email sent successfully!")
    except Exception as e:
        print(f"‚ùå Failed to send email: {e}")
